/**
 * Generate FOUNDATION.md from foundation.json (Generic Schema v2.0.0)
 * This is a template-based markdown generator for the generic foundation schema
 */
export async function generateFoundationMd(foundation: any): Promise<string> {
  const sections: string[] = [];

  // Header with auto-generation warning
  sections.push(
    '<!-- THIS FILE IS AUTO-GENERATED FROM spec/foundation.json -->'
  );
  sections.push('<!-- DO NOT EDIT THIS FILE DIRECTLY -->');
  sections.push(
    '<!-- Edit spec/foundation.json and run: fspec generate-foundation-md -->'
  );
  sections.push('');

  // Project header
  if (foundation.project && foundation.project.name) {
    sections.push(`# ${foundation.project.name} Project Foundation`);
    sections.push('');
  } else {
    sections.push('# Project Foundation');
    sections.push('');
  }

  // Project Vision
  if (foundation.project && foundation.project.vision) {
    sections.push('## Vision');
    sections.push('');
    sections.push(foundation.project.vision);
    sections.push('');
    sections.push('---');
    sections.push('');
  }

  // Problem Space
  if (foundation.problemSpace && foundation.problemSpace.primaryProblem) {
    const problem = foundation.problemSpace.primaryProblem;

    sections.push('## Problem Space');
    sections.push('');

    if (problem.title) {
      sections.push(`### ${problem.title}`);
      sections.push('');
    }

    if (problem.description) {
      sections.push(problem.description);
      sections.push('');
    }

    if (problem.impact) {
      sections.push(`**Impact:** ${problem.impact}`);
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Solution Space
  if (foundation.solutionSpace) {
    sections.push('## Solution Space');
    sections.push('');

    if (foundation.solutionSpace.overview) {
      sections.push('### Overview');
      sections.push('');
      sections.push(foundation.solutionSpace.overview);
      sections.push('');
    }

    if (
      foundation.solutionSpace.capabilities &&
      foundation.solutionSpace.capabilities.length > 0
    ) {
      sections.push('### Capabilities');
      sections.push('');
      for (const capability of foundation.solutionSpace.capabilities) {
        if (capability.name && capability.description) {
          sections.push(`- **${capability.name}**: ${capability.description}`);
        } else if (capability.name) {
          sections.push(`- **${capability.name}**`);
        }
      }
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Personas
  if (foundation.personas && foundation.personas.length > 0) {
    sections.push('## Personas');
    sections.push('');

    for (const persona of foundation.personas) {
      if (persona.name) {
        sections.push(`### ${persona.name}`);
        sections.push('');
      }

      if (persona.description) {
        sections.push(persona.description);
        sections.push('');
      }

      if (persona.goals && persona.goals.length > 0) {
        sections.push('**Goals:**');
        for (const goal of persona.goals) {
          sections.push(`- ${goal}`);
        }
        sections.push('');
      }
    }

    sections.push('---');
    sections.push('');
  }

  // Architecture Diagrams
  if (
    foundation.architectureDiagrams &&
    foundation.architectureDiagrams.length > 0
  ) {
    sections.push('## Architecture Diagrams');
    sections.push('');

    for (const diagram of foundation.architectureDiagrams) {
      if (diagram.title) {
        sections.push(`### ${diagram.title}`);
        sections.push('');
      }

      if (diagram.description) {
        sections.push(diagram.description);
        sections.push('');
      }

      if (diagram.mermaidCode) {
        sections.push('```mermaid');
        sections.push(diagram.mermaidCode);
        sections.push('```');
        sections.push('');
      }
    }

    sections.push('---');
    sections.push('');
  }

  return sections.join('\n');
}
