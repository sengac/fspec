import type { Foundation } from '../types/foundation';

/**
 * Generate FOUNDATION.md from foundation.json
 * This is a template-based markdown generator
 */
export async function generateFoundationMd(
  foundation: Foundation
): Promise<string> {
  const sections: string[] = [];

  // Header with auto-generation warning
  sections.push(
    '<!-- THIS FILE IS AUTO-GENERATED FROM spec/foundation.json -->'
  );
  sections.push('<!-- DO NOT EDIT THIS FILE DIRECTLY -->');
  sections.push(
    '<!-- Edit spec/foundation.json and run: fspec generate-foundation -->'
  );
  sections.push('');

  // Project header
  sections.push(`# ${foundation.project.name} Project Foundation Document`);
  sections.push('');
  sections.push(`**IMPORTANT NOTE:** ${foundation.project.importantNote}`);
  sections.push('');

  // What We Are Building section
  if (foundation.whatWeAreBuilding) {
    sections.push('## 1. What We Are Building');
    sections.push('');

    if (foundation.whatWeAreBuilding.projectOverview) {
      sections.push('### Project Overview');
      sections.push('');
      sections.push(foundation.whatWeAreBuilding.projectOverview);
      sections.push('');
    }

    // Technical Requirements
    const tech = foundation.whatWeAreBuilding.technicalRequirements;
    if (tech) {
      sections.push('### Technical Requirements');
      sections.push('');

      if (tech.coreTechnologies && tech.coreTechnologies.length > 0) {
        sections.push('#### Core Technologies');
        sections.push('');
        for (const item of tech.coreTechnologies) {
          if (item.description) {
            sections.push(
              `- **${item.category}:** ${item.name} - ${item.description}`
            );
          } else {
            sections.push(`- **${item.category}:** ${item.name}`);
          }
        }
        sections.push('');
      }

      if (tech.keyLibraries && tech.keyLibraries.length > 0) {
        sections.push('#### Key Libraries & Dependencies');
        sections.push('');
        for (const category of tech.keyLibraries) {
          sections.push(`**${category.category}:**`);
          for (const lib of category.libraries) {
            sections.push(`- **${lib.name}**: ${lib.description}`);
          }
          sections.push('');
        }
      }
    }

    // Non-Functional Requirements
    if (
      foundation.whatWeAreBuilding.nonFunctionalRequirements &&
      foundation.whatWeAreBuilding.nonFunctionalRequirements.length > 0
    ) {
      sections.push('### Non-Functional Requirements');
      sections.push('');
      for (const category of foundation.whatWeAreBuilding
        .nonFunctionalRequirements) {
        sections.push(`- **${category.category}:**`);
        for (const req of category.requirements) {
          sections.push(`  - ${req}`);
        }
      }
      sections.push('');
    }
  }

  sections.push('---');
  sections.push('');

  // Why We Are Building It section
  if (foundation.whyWeAreBuildingIt) {
    sections.push('## 2. Why We Are Building It');
    sections.push('');

    // Problem Definition
    if (foundation.whyWeAreBuildingIt.problemDefinition) {
      sections.push('### Problem Definition');
      sections.push('');

      const primary = foundation.whyWeAreBuildingIt.problemDefinition.primary;
      if (primary) {
        sections.push(`#### ${primary.title}`);
        sections.push('');
        sections.push(primary.description);
        sections.push('');
        if (primary.points && primary.points.length > 0) {
          for (const point of primary.points) {
            sections.push(`${point}`);
          }
          sections.push('');
        }
      }

      if (
        foundation.whyWeAreBuildingIt.problemDefinition.secondary &&
        foundation.whyWeAreBuildingIt.problemDefinition.secondary.length > 0
      ) {
        sections.push('#### Secondary Problems');
        sections.push('');
        for (const problem of foundation.whyWeAreBuildingIt.problemDefinition
          .secondary) {
          sections.push(`${problem}`);
        }
        sections.push('');
      }

      // Specification Management Problems
      if (foundation.whyWeAreBuildingIt.problemDefinition.specification) {
        const spec =
          foundation.whyWeAreBuildingIt.problemDefinition.specification;
        sections.push(`#### ${spec.title}`);
        sections.push('');
        if (spec.problems && spec.problems.length > 0) {
          for (const problem of spec.problems) {
            sections.push(`- ${problem}`);
          }
          sections.push('');
        }
      }

      // Project Management Problems
      if (foundation.whyWeAreBuildingIt.problemDefinition.projectManagement) {
        const pm =
          foundation.whyWeAreBuildingIt.problemDefinition.projectManagement;
        sections.push(`#### ${pm.title}`);
        sections.push('');
        if (pm.problems && pm.problems.length > 0) {
          for (const problem of pm.problems) {
            sections.push(`- ${problem}`);
          }
          sections.push('');
        }
      }
    }

    // Why ACDD section
    if (foundation.whyWeAreBuildingIt.whyACDD) {
      const acdd = foundation.whyWeAreBuildingIt.whyACDD;
      sections.push(`### ${acdd.title}`);
      sections.push('');
      if (acdd.description) {
        sections.push(acdd.description);
        sections.push('');
      }

      if (acdd.specificationByExample) {
        sections.push('**Specification by Example:**');
        sections.push('');
        sections.push(
          `- **Principle:** ${acdd.specificationByExample.principle}`
        );
        sections.push(`- **Benefit:** ${acdd.specificationByExample.benefit}`);
        sections.push('');
      }

      if (acdd.bdd) {
        sections.push('**BDD (Behavior-Driven Development):**');
        sections.push('');
        sections.push(`- **Principle:** ${acdd.bdd.principle}`);
        sections.push(`- **Benefit:** ${acdd.bdd.benefit}`);
        sections.push('');
      }

      if (acdd.acdd) {
        sections.push('**ACDD (Acceptance Criteria Driven Development):**');
        sections.push('');
        sections.push(`- **Principle:** ${acdd.acdd.principle}`);
        sections.push(`- **Benefit:** ${acdd.acdd.benefit}`);
        if (acdd.acdd.challenge) {
          sections.push(`- **Challenge:** ${acdd.acdd.challenge}`);
        }
        sections.push('');
      }
    }

    // The Integrated Solution
    if (foundation.whyWeAreBuildingIt.theIntegratedSolution) {
      const solution = foundation.whyWeAreBuildingIt.theIntegratedSolution;
      sections.push(`### ${solution.title}`);
      sections.push('');
      if (solution.description) {
        sections.push(solution.description);
        sections.push('');
      }

      if (solution.specificationManagement) {
        const sm = solution.specificationManagement;
        sections.push('**Specification Management:**');
        sections.push('');
        if (sm.purpose) {
          sections.push(`*Purpose:* ${sm.purpose}`);
          sections.push('');
        }
        if (sm.tools && sm.tools.length > 0) {
          sections.push('*Tools:*');
          for (const tool of sm.tools) {
            sections.push(`- ${tool}`);
          }
          sections.push('');
        }
        if (sm.impact) {
          sections.push(`*Impact:* ${sm.impact}`);
          sections.push('');
        }
      }

      if (solution.projectManagement) {
        const pm = solution.projectManagement;
        sections.push('**Project Management:**');
        sections.push('');
        if (pm.purpose) {
          sections.push(`*Purpose:* ${pm.purpose}`);
          sections.push('');
        }
        if (pm.tools && pm.tools.length > 0) {
          sections.push('*Tools:*');
          for (const tool of pm.tools) {
            sections.push(`- ${tool}`);
          }
          sections.push('');
        }
        if (pm.impact) {
          sections.push(`*Impact:* ${pm.impact}`);
          sections.push('');
        }
      }

      if (solution.integration) {
        const integration = solution.integration;
        if (integration.workflow && integration.workflow.length > 0) {
          sections.push('**Integrated Workflow:**');
          sections.push('');
          for (const step of integration.workflow) {
            sections.push(`- ${step}`);
          }
          sections.push('');
        }
        if (integration.benefitExample) {
          sections.push('**Example:**');
          sections.push('');
          sections.push(integration.benefitExample);
          sections.push('');
        }
      }
    }

    // Pain Points
    if (foundation.whyWeAreBuildingIt.painPoints) {
      const painPoints = foundation.whyWeAreBuildingIt.painPoints;

      if (painPoints.beforeFspec || painPoints.afterFspec) {
        sections.push('### Before vs. After fspec');
        sections.push('');

        if (painPoints.beforeFspec) {
          sections.push('**Before fspec:**');
          sections.push('');
          sections.push(painPoints.beforeFspec);
          sections.push('');
        }

        if (painPoints.afterFspec) {
          sections.push('**After fspec:**');
          sections.push('');
          sections.push(painPoints.afterFspec);
          sections.push('');
        }
      }
    }

    // Stakeholder Impact
    if (
      foundation.whyWeAreBuildingIt.stakeholderImpact &&
      foundation.whyWeAreBuildingIt.stakeholderImpact.length > 0
    ) {
      sections.push('### Stakeholder Impact');
      sections.push('');

      for (const stakeholder of foundation.whyWeAreBuildingIt
        .stakeholderImpact) {
        sections.push(`**${stakeholder.stakeholder}:**`);
        sections.push('');

        if (stakeholder.description) {
          sections.push(stakeholder.description);
          sections.push('');
        } else if (stakeholder.currentPain && stakeholder.benefit) {
          sections.push(`- **Current Pain:** ${stakeholder.currentPain}`);
          sections.push(`- **Benefit:** ${stakeholder.benefit}`);
          sections.push('');
        }
      }
    }

    // Why Not Alternatives
    if (
      foundation.whyWeAreBuildingIt.whyNotAlternatives &&
      foundation.whyWeAreBuildingIt.whyNotAlternatives.length > 0
    ) {
      sections.push('### Why Not Alternative Approaches?');
      sections.push('');

      for (const alt of foundation.whyWeAreBuildingIt.whyNotAlternatives) {
        sections.push(`**${alt.alternative}:**`);
        sections.push('');
        if (alt.limitations && alt.limitations.length > 0) {
          for (const limitation of alt.limitations) {
            sections.push(`- ${limitation}`);
          }
          sections.push('');
        }
      }
    }

    // Success Criteria
    if (
      foundation.whyWeAreBuildingIt.successCriteria &&
      foundation.whyWeAreBuildingIt.successCriteria.length > 0
    ) {
      sections.push('### Success Criteria');
      sections.push('');
      for (const criterion of foundation.whyWeAreBuildingIt.successCriteria) {
        sections.push(`**${criterion.title}:**`);
        sections.push('');
        for (const item of criterion.criteria) {
          sections.push(`- ${item}`);
        }
        sections.push('');
      }
    }
  }

  sections.push('---');
  sections.push('');

  // Architecture Diagrams section
  if (
    foundation.architectureDiagrams &&
    foundation.architectureDiagrams.length > 0
  ) {
    sections.push('## 3. Architecture Diagrams');
    sections.push('');

    for (const diagram of foundation.architectureDiagrams) {
      sections.push(`### ${diagram.title}`);
      sections.push('');
      if (diagram.description) {
        sections.push(diagram.description);
        sections.push('');
      }
      sections.push('```mermaid');
      sections.push(diagram.mermaidCode);
      sections.push('```');
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Core Commands Reference
  if (
    foundation.coreCommands &&
    foundation.coreCommands.categories &&
    foundation.coreCommands.categories.length > 0
  ) {
    sections.push('## 4. Core Commands Reference');
    sections.push('');

    for (const category of foundation.coreCommands.categories) {
      sections.push(`### ${category.title}`);
      sections.push('');
      for (const cmd of category.commands) {
        sections.push(
          `- \`${cmd.command}\` - ${cmd.description} ${cmd.status}`
        );
      }
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Feature Inventory
  if (
    foundation.featureInventory &&
    foundation.featureInventory.phases &&
    foundation.featureInventory.phases.length > 0
  ) {
    sections.push('## 5. Feature File Inventory');
    sections.push('');

    for (const phase of foundation.featureInventory.phases) {
      const featureCount = phase.features.length;
      sections.push(`### ${phase.title} (${featureCount} features)`);
      sections.push('');
      sections.push(phase.description);
      sections.push('');
      sections.push('| Feature File | Command | Description |');
      sections.push('|--------------|---------|-------------|');
      for (const feature of phase.features) {
        sections.push(
          `| ${feature.featureFile} | \`${feature.command}\` | ${feature.description} |`
        );
      }
      sections.push('');
    }

    // Tag Usage Summary
    if (foundation.featureInventory.tagUsageSummary) {
      sections.push('### Tag Usage Summary');
      sections.push('');

      const summary = foundation.featureInventory.tagUsageSummary;

      if (summary.phaseDistribution && summary.phaseDistribution.length > 0) {
        sections.push('**Phase Distribution:**');
        for (const dist of summary.phaseDistribution) {
          sections.push(
            `- ${dist.tag}: ${dist.count} files (${dist.percentage})`
          );
        }
        sections.push('');
      }

      if (
        summary.componentDistribution &&
        summary.componentDistribution.length > 0
      ) {
        sections.push('**Component Distribution:**');
        for (const dist of summary.componentDistribution) {
          sections.push(
            `- ${dist.tag}: ${dist.count} files (${dist.percentage})`
          );
        }
        sections.push('');
      }
    }

    sections.push('---');
    sections.push('');
  }

  // Notes Section
  if (foundation.notes) {
    sections.push('## Notes Section');
    sections.push('');

    if (
      foundation.notes.developmentStatus &&
      foundation.notes.developmentStatus.length > 0
    ) {
      sections.push('### Development Status');
      sections.push('');

      for (const phaseStatus of foundation.notes.developmentStatus) {
        const statusIcon =
          phaseStatus.status === 'COMPLETE'
            ? '✅'
            : phaseStatus.status === 'IN_PROGRESS'
              ? '🚧'
              : '📋';
        sections.push(
          `#### ${statusIcon} ${phaseStatus.title} (${phaseStatus.status})`
        );

        for (const item of phaseStatus.items) {
          sections.push(`- ${item}`);
        }
        sections.push('');

        if (phaseStatus.testCoverage) {
          sections.push(`**Test Coverage:** ${phaseStatus.testCoverage}`);
          sections.push('');
        }
      }
    }

    if (foundation.notes.projectName) {
      sections.push(`### Project Name: ${foundation.notes.projectName.name}`);
      sections.push('');
      sections.push(foundation.notes.projectName.description);
      sections.push('');
      sections.push(
        `**GitHub Repository:** ${foundation.notes.projectName.repository}`
      );
      sections.push('');
    }
  }

  return sections.join('\n');
}
