import type { Foundation } from '../types/foundation';

/**
 * Generate FOUNDATION.md from foundation.json
 * This is a template-based markdown generator
 */
export async function generateFoundationMd(foundation: Foundation): Promise<string> {
  const sections: string[] = [];

  // Header with auto-generation warning
  sections.push('<!-- THIS FILE IS AUTO-GENERATED FROM spec/foundation.json -->');
  sections.push('<!-- DO NOT EDIT THIS FILE DIRECTLY -->');
  sections.push('<!-- Edit spec/foundation.json and run: fspec generate-foundation -->');
  sections.push('');

  // Project header
  sections.push(`# ${foundation.project.name} Project Foundation Document`);
  sections.push('');
  sections.push(`**IMPORTANT NOTE:** ${foundation.project.importantNote}`);
  sections.push('');

  // What We Are Building section
  if (foundation.whatWeAreBuilding) {
    sections.push('## 1. What We Are Building');
    sections.push('');

    if (foundation.whatWeAreBuilding.projectOverview) {
      sections.push('### Project Overview');
      sections.push('');
      sections.push(foundation.whatWeAreBuilding.projectOverview);
      sections.push('');
    }

    // Technical Requirements
    const tech = foundation.whatWeAreBuilding.technicalRequirements;
    if (tech) {
      sections.push('### Technical Requirements');
      sections.push('');

      if (tech.coreTechnologies && tech.coreTechnologies.length > 0) {
        sections.push('#### Core Technologies');
        sections.push('');
        for (const item of tech.coreTechnologies) {
          if (item.description) {
            sections.push(`- **${item.category}:** ${item.name} - ${item.description}`);
          } else {
            sections.push(`- **${item.category}:** ${item.name}`);
          }
        }
        sections.push('');
      }

      if (tech.keyLibraries && tech.keyLibraries.length > 0) {
        sections.push('#### Key Libraries & Dependencies');
        sections.push('');
        for (const category of tech.keyLibraries) {
          sections.push(`**${category.category}:**`);
          for (const lib of category.libraries) {
            sections.push(`- **${lib.name}**: ${lib.description}`);
          }
          sections.push('');
        }
      }
    }

    // Non-Functional Requirements
    if (foundation.whatWeAreBuilding.nonFunctionalRequirements && foundation.whatWeAreBuilding.nonFunctionalRequirements.length > 0) {
      sections.push('### Non-Functional Requirements');
      sections.push('');
      for (const category of foundation.whatWeAreBuilding.nonFunctionalRequirements) {
        sections.push(`- **${category.category}:**`);
        for (const req of category.requirements) {
          sections.push(`  - ${req}`);
        }
      }
      sections.push('');
    }
  }

  sections.push('---');
  sections.push('');

  // Why We Are Building It section
  if (foundation.whyWeAreBuildingIt) {
    sections.push('## 2. Why We Are Building It');
    sections.push('');

    // Problem Definition
    if (foundation.whyWeAreBuildingIt.problemDefinition) {
      sections.push('### Problem Definition');
      sections.push('');

      const primary = foundation.whyWeAreBuildingIt.problemDefinition.primary;
      if (primary) {
        sections.push(`#### ${primary.title}`);
        sections.push('');
        sections.push(primary.description);
        sections.push('');
        if (primary.points && primary.points.length > 0) {
          for (const point of primary.points) {
            sections.push(`${point}`);
          }
          sections.push('');
        }
      }

      if (foundation.whyWeAreBuildingIt.problemDefinition.secondary && foundation.whyWeAreBuildingIt.problemDefinition.secondary.length > 0) {
        sections.push('#### Secondary Problems');
        sections.push('');
        for (const problem of foundation.whyWeAreBuildingIt.problemDefinition.secondary) {
          sections.push(`${problem}`);
        }
        sections.push('');
      }
    }

    // Success Criteria
    if (foundation.whyWeAreBuildingIt.successCriteria && foundation.whyWeAreBuildingIt.successCriteria.length > 0) {
      sections.push('### Success Criteria');
      sections.push('');
      for (const criterion of foundation.whyWeAreBuildingIt.successCriteria) {
        sections.push(`**${criterion.title}:**`);
        sections.push('');
        for (const item of criterion.criteria) {
          sections.push(`- ${item}`);
        }
        sections.push('');
      }
    }
  }

  sections.push('---');
  sections.push('');

  // Architecture Diagrams section
  if (foundation.architectureDiagrams && foundation.architectureDiagrams.length > 0) {
    sections.push('## 3. Architecture Diagrams');
    sections.push('');

    for (const diagram of foundation.architectureDiagrams) {
      sections.push(`### ${diagram.title}`);
      sections.push('');
      if (diagram.description) {
        sections.push(diagram.description);
        sections.push('');
      }
      sections.push('```mermaid');
      sections.push(diagram.mermaidCode);
      sections.push('```');
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Core Commands Reference
  if (foundation.coreCommands && foundation.coreCommands.categories && foundation.coreCommands.categories.length > 0) {
    sections.push('## 4. Core Commands Reference');
    sections.push('');

    for (const category of foundation.coreCommands.categories) {
      sections.push(`### ${category.title}`);
      sections.push('');
      for (const cmd of category.commands) {
        sections.push(`- \`${cmd.command}\` - ${cmd.description} ${cmd.status}`);
      }
      sections.push('');
    }

    sections.push('---');
    sections.push('');
  }

  // Feature Inventory
  if (foundation.featureInventory && foundation.featureInventory.phases && foundation.featureInventory.phases.length > 0) {
    sections.push('## 5. Feature File Inventory');
    sections.push('');

    for (const phase of foundation.featureInventory.phases) {
      const featureCount = phase.features.length;
      sections.push(`### ${phase.title} (${featureCount} features)`);
      sections.push('');
      sections.push(phase.description);
      sections.push('');
      sections.push('| Feature File | Command | Description |');
      sections.push('|--------------|---------|-------------|');
      for (const feature of phase.features) {
        sections.push(`| ${feature.featureFile} | \`${feature.command}\` | ${feature.description} |`);
      }
      sections.push('');
    }

    // Tag Usage Summary
    if (foundation.featureInventory.tagUsageSummary) {
      sections.push('### Tag Usage Summary');
      sections.push('');

      const summary = foundation.featureInventory.tagUsageSummary;

      if (summary.phaseDistribution && summary.phaseDistribution.length > 0) {
        sections.push('**Phase Distribution:**');
        for (const dist of summary.phaseDistribution) {
          sections.push(`- ${dist.tag}: ${dist.count} files (${dist.percentage})`);
        }
        sections.push('');
      }

      if (summary.componentDistribution && summary.componentDistribution.length > 0) {
        sections.push('**Component Distribution:**');
        for (const dist of summary.componentDistribution) {
          sections.push(`- ${dist.tag}: ${dist.count} files (${dist.percentage})`);
        }
        sections.push('');
      }
    }

    sections.push('---');
    sections.push('');
  }

  // Notes Section
  if (foundation.notes) {
    sections.push('## Notes Section');
    sections.push('');

    if (foundation.notes.developmentStatus && foundation.notes.developmentStatus.length > 0) {
      sections.push('### Development Status');
      sections.push('');

      for (const phaseStatus of foundation.notes.developmentStatus) {
        const statusIcon = phaseStatus.status === 'COMPLETE' ? 'âœ…' : phaseStatus.status === 'IN_PROGRESS' ? 'ðŸš§' : 'ðŸ“‹';
        sections.push(`#### ${statusIcon} ${phaseStatus.title} (${phaseStatus.status})`);

        for (const item of phaseStatus.items) {
          sections.push(`- ${item}`);
        }
        sections.push('');

        if (phaseStatus.testCoverage) {
          sections.push(`**Test Coverage:** ${phaseStatus.testCoverage}`);
          sections.push('');
        }
      }
    }

    if (foundation.notes.projectName) {
      sections.push(`### Project Name: ${foundation.notes.projectName.name}`);
      sections.push('');
      sections.push(foundation.notes.projectName.description);
      sections.push('');
      sections.push(`**GitHub Repository:** ${foundation.notes.projectName.repository}`);
      sections.push('');
    }
  }

  return sections.join('\n');
}
