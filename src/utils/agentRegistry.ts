/**
 * Agent Registry - Configuration for all supported AI coding agents
 */

export interface AgentConfig {
  id: string;
  name: string;
  description: string;
  slashCommandPath: string;
  slashCommandFormat: 'markdown' | 'toml';
  supportsSystemReminders: boolean;
  supportsMetaCognition: boolean;
  docTemplate: string;
  detectionPaths: string[];
  available: boolean;
  category: 'ide' | 'cli' | 'extension';
  popularity?: number;
}

export const AGENT_REGISTRY: AgentConfig[] = [
  {
    id: 'claude',
    name: 'Claude Code',
    description: 'Anthropic CLI (nested slash commands, system-reminders)',
    slashCommandPath: '.claude/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: true,
    supportsMetaCognition: true,
    docTemplate: 'CLAUDE.md',
    detectionPaths: ['.claude/', '.claude/commands/'],
    available: true,
    category: 'cli',
    popularity: 1,
  },
  {
    id: 'cursor',
    name: 'Cursor',
    description: 'IDE with AI assistant (flat slash commands)',
    slashCommandPath: '.cursor/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'CURSOR.md',
    detectionPaths: ['.cursor/', '.cursor/commands/'],
    available: true,
    category: 'ide',
    popularity: 2,
  },
  {
    id: 'cline',
    name: 'Cline',
    description: 'VS Code extension (no system-reminders)',
    slashCommandPath: '.cline/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'CLINE.md',
    detectionPaths: ['.cline/', '.continue/'],
    available: true,
    category: 'extension',
    popularity: 4,
  },
  {
    id: 'aider',
    name: 'Aider',
    description: 'CLI agent (no meta-cognitive prompts)',
    slashCommandPath: '.aider/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'AIDER.md',
    detectionPaths: ['.aider/'],
    available: true,
    category: 'cli',
    popularity: 5,
  },
  {
    id: 'windsurf',
    name: 'Windsurf',
    description: 'IDE-based agent',
    slashCommandPath: '.windsurf/workflows/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'WINDSURF.md',
    detectionPaths: ['.windsurf/'],
    available: true,
    category: 'ide',
    popularity: 6,
  },
  {
    id: 'copilot',
    name: 'GitHub Copilot',
    description: 'GitHub AI assistant',
    slashCommandPath: '.github/prompts/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'COPILOT.md',
    detectionPaths: ['.github/prompts/'],
    available: true,
    category: 'extension',
    popularity: 3,
  },
  {
    id: 'gemini',
    name: 'Gemini CLI',
    description: 'Google CLI agent (TOML format)',
    slashCommandPath: '.gemini/commands/',
    slashCommandFormat: 'toml',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'GEMINI.md',
    detectionPaths: ['.gemini/'],
    available: true,
    category: 'cli',
    popularity: 7,
  },
  {
    id: 'qwen',
    name: 'Qwen Code',
    description: 'Qwen CLI agent (TOML format)',
    slashCommandPath: '.qwen/commands/',
    slashCommandFormat: 'toml',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'QWEN.md',
    detectionPaths: ['.qwen/'],
    available: true,
    category: 'cli',
    popularity: 8,
  },
  {
    id: 'kilocode',
    name: 'Kilo Code',
    description: 'IDE agent with rules-based pattern',
    slashCommandPath: '.kilocode/rules/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'KILOCODE.md',
    detectionPaths: ['.kilocode/'],
    available: true,
    category: 'ide',
    popularity: 9,
  },
  {
    id: 'roo',
    name: 'Roo Code',
    description: 'IDE agent with rules pattern',
    slashCommandPath: '.roo/rules/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'ROO.md',
    detectionPaths: ['.roo/'],
    available: true,
    category: 'ide',
    popularity: 10,
  },
  {
    id: 'codebuddy',
    name: 'CodeBuddy',
    description: 'CLI-based agent',
    slashCommandPath: '.codebuddy/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'CODEBUDDY.md',
    detectionPaths: ['.codebuddy/'],
    available: true,
    category: 'cli',
    popularity: 11,
  },
  {
    id: 'amazonq',
    name: 'Amazon Q',
    description: 'AWS AI assistant',
    slashCommandPath: '.amazonq/prompts/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'AMAZONQ.md',
    detectionPaths: ['.amazonq/'],
    available: true,
    category: 'extension',
    popularity: 12,
  },
  {
    id: 'auggie',
    name: 'Auggie',
    description: 'Augment CLI agent',
    slashCommandPath: '.auggie/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'AUGGIE.md',
    detectionPaths: ['.auggie/'],
    available: true,
    category: 'cli',
    popularity: 13,
  },
  {
    id: 'opencode',
    name: 'OpenCode',
    description: 'CLI agent',
    slashCommandPath: '.opencode/command/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'OPENCODE.md',
    detectionPaths: ['.opencode/'],
    available: true,
    category: 'cli',
    popularity: 14,
  },
  {
    id: 'codex',
    name: 'Codex',
    description: 'OpenAI Codex agent',
    slashCommandPath: '.codex/prompts/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'AGENTS.md',
    detectionPaths: ['.codex/'],
    available: true,
    category: 'cli',
    popularity: 15,
  },
  {
    id: 'factory',
    name: 'Factory Droid',
    description: 'Factory agent',
    slashCommandPath: '.factory/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'FACTORY.md',
    detectionPaths: ['.factory/'],
    available: true,
    category: 'cli',
    popularity: 16,
  },
  {
    id: 'crush',
    name: 'Crush',
    description: 'Crush agent',
    slashCommandPath: '.crush/commands/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'CRUSH.md',
    detectionPaths: ['.crush/'],
    available: true,
    category: 'cli',
    popularity: 17,
  },
  {
    id: 'codex-cli',
    name: 'Codex CLI',
    description: 'Codex command-line interface',
    slashCommandPath: '.codex/prompts/',
    slashCommandFormat: 'markdown',
    supportsSystemReminders: false,
    supportsMetaCognition: false,
    docTemplate: 'AGENTS.md',
    detectionPaths: ['.codex-cli/'],
    available: true,
    category: 'cli',
    popularity: 18,
  },
];

export function getAgentById(id: string): AgentConfig | undefined {
  return AGENT_REGISTRY.find(agent => agent.id === id);
}

export function getAvailableAgents(): AgentConfig[] {
  return AGENT_REGISTRY.filter(agent => agent.available);
}
