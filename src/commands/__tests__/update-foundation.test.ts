import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mkdir, writeFile, rm, readFile, access } from 'fs/promises';
import { join } from 'path';
import { updateFoundation } from '../update-foundation';

describe('Feature: Update Foundation Section Content', () => {
  let testDir: string;

  beforeEach(async () => {
    testDir = join(process.cwd(), 'test-tmp-update-foundation');
    await mkdir(testDir, { recursive: true });
    await mkdir(join(testDir, 'spec'), { recursive: true });
  });

  afterEach(async () => {
    await rm(testDir, { recursive: true, force: true });
  });

  describe('Scenario: JSON-backed workflow - modify JSON and regenerate MD', () => {
    it('should update foundation.json and regenerate FOUNDATION.md', async () => {
      // Given I have a valid foundation.json file
      const foundationJsonPath = join(testDir, 'spec', 'foundation.json');
      const minimalFoundation = {
        $schema: '../src/schemas/foundation.schema.json',
        project: {
          name: 'Test Project',
          description: 'Test',
          repository: 'https://test.com',
          license: 'MIT',
          importantNote: 'Test note',
        },
        whatWeAreBuilding: {
          projectOverview: 'Original project overview',
          technicalRequirements: {
            coreTechnologies: [],
            architecture: {
              pattern: 'CLI',
              fileStructure: 'test',
              deploymentTarget: 'local',
              integrationModel: [],
            },
            developmentAndOperations: {
              developmentTools: 'test',
              testingStrategy: 'test',
              logging: 'test',
              validation: 'test',
              formatting: 'test',
            },
            keyLibraries: [],
          },
          nonFunctionalRequirements: [],
        },
        whyWeAreBuildingIt: {
          problemDefinition: {
            primary: {
              title: 'Primary Problem',
              description: 'Original problem description',
              points: [],
            },
            secondary: [],
          },
          painPoints: { currentState: 'Test', specific: [] },
          stakeholderImpact: [],
          theoreticalSolutions: [],
          developmentMethodology: {
            name: 'ACDD',
            description: 'Test',
            steps: [],
            ensures: [],
          },
          successCriteria: [],
          constraintsAndAssumptions: { constraints: [], assumptions: [] },
        },
        architectureDiagrams: [],
        coreCommands: { categories: [] },
        featureInventory: {
          phases: [],
          tagUsageSummary: {
            phaseDistribution: [],
            componentDistribution: [],
            featureGroupDistribution: [],
            priorityDistribution: [],
            testingCoverage: [],
          },
        },
        notes: { developmentStatus: [] },
      };

      await writeFile(
        foundationJsonPath,
        JSON.stringify(minimalFoundation, null, 2)
      );

      // When I run `fspec update-foundation projectOverview "Updated project overview content"`
      const result = await updateFoundation({
        section: 'projectOverview',
        content: 'Updated project overview content',
        cwd: testDir,
      });

      // Then the foundation.json file should be updated
      expect(result.success).toBe(true);

      const updatedFoundationJson = JSON.parse(
        await readFile(foundationJsonPath, 'utf-8')
      );

      // And the foundation.json should validate against foundation.schema.json
      expect(updatedFoundationJson.whatWeAreBuilding).toBeDefined();

      // And the whatWeAreBuilding.projectOverview field should contain "Updated project overview content"
      expect(updatedFoundationJson.whatWeAreBuilding.projectOverview).toBe(
        'Updated project overview content'
      );

      // And other foundation.json fields should be preserved
      expect(updatedFoundationJson.project.name).toBe('Test Project');
      expect(
        updatedFoundationJson.whyWeAreBuildingIt.problemDefinition.primary
          .description
      ).toBe('Original problem description');

      // And FOUNDATION.md should be regenerated from foundation.json
      const foundationContent = await readFile(
        join(testDir, 'spec', 'FOUNDATION.md'),
        'utf-8'
      );

      // And FOUNDATION.md should contain the updated content
      expect(foundationContent).toContain('Updated project overview content');

      // And FOUNDATION.md should have the auto-generation warning header
      expect(foundationContent).toContain(
        '<!-- THIS FILE IS AUTO-GENERATED FROM spec/foundation.json -->'
      );
      expect(foundationContent).toContain('<!-- DO NOT EDIT THIS FILE DIRECTLY -->');
    });
  });
});
