@COV-032
@phase7
@cli
@generator
@tag-management
@documentation
@critical
@integration-test
Feature: Generate TAGS.md from tags.json
  """
  Architecture notes:
  - Reads tags.json and validates against schema
  - Generates TAGS.md using template-based markdown generation
  - Preserves all tag categories, examples, guidelines, and statistics
  - Adds auto-generation warning header
  - Formats tag tables with proper markdown syntax
  - Handles dynamic content like statistics and query examples

  Critical implementation requirements:
  - MUST validate JSON before generation
  - MUST generate all tag category tables
  - MUST include combination examples with proper formatting
  - MUST preserve tag usage guidelines and conventions
  - MUST format statistics tables correctly
  - MUST include validation rules and commands
  - MUST be idempotent (generate → regenerate produces same output)

  Template sections:
  1. Header with warning
  2. Tag Categories (multiple tables)
  3. Tag Combination Examples (code blocks with interpretation)
  4. Tag Usage Guidelines (required, recommended, ordering)
  5. Adding New Tags (process, conventions, anti-patterns)
  6. Tag-Based Queries (examples with commands)
  7. Tag Statistics (current usage tables)
  8. Validation (rules and commands)
  9. References

  References:
  - Markdown tables: https://www.markdownguide.org/extended-syntax/#tables
  """

  Background: User Story
    As a developer maintaining the tag registry
    I want to generate TAGS.md from tags.json
    So that tag documentation stays consistent and properly formatted

  Scenario: Generate TAGS.md from valid tags.json
    Given I have a valid file "spec/tags.json"
    When I run `fspec generate-tags`
    Then the command should exit with code 0
    And the file "spec/TAGS.md" should be created
    And it should contain the auto-generation warning header
    And it should contain all tag categories from tags.json
    And the output should display "✓ Generated spec/TAGS.md from spec/tags.json"

  Scenario: Auto-generation warning header is included
    Given I have a valid file "spec/tags.json"
    When I run `fspec generate-tags`
    Then the file "spec/TAGS.md" should start with:
      """
      <!-- THIS FILE IS AUTO-GENERATED FROM spec/tags.json -->
      <!-- DO NOT EDIT THIS FILE DIRECTLY -->
      <!-- Edit spec/tags.json and run: fspec generate-tags -->
      """

  Scenario: Tag category with table is generated correctly
    Given I have "spec/tags.json" with a tag category:
      """json
      {
        "categories": [
          {
            "name": "Phase Tags",
            "description": "Tags that identify development phase",
            "required": true,
            "tags": [
              {
                "name": "@phase1",
                "description": "Phase 1: Core Validation",
                "usage": "Features: Gherkin validation, feature creation"
              }
            ],
            "rule": "Every feature file MUST have exactly ONE phase tag."
          }
        ]
      }
      """
    When I run `fspec generate-tags`
    Then "spec/TAGS.md" should contain:
      """
      ### Phase Tags (Required)

      Tags that identify development phase

      | Tag | Description | Usage |
      |-----|-------------|-------|
      | `@phase1` | Phase 1: Core Validation | Features: Gherkin validation, feature creation |

      **Rule**: Every feature file MUST have exactly ONE phase tag.
      """

  Scenario: Tag combination examples are formatted correctly
    Given I have "spec/tags.json" with combination examples:
      """json
      {
        "combinationExamples": [
          {
            "title": "Example 1: Phase 1 Feature File Creation",
            "tags": "@phase1 @cli @generator @feature-management",
            "interpretation": [
              "Phase 1 feature",
              "Belongs to CLI component",
              "Part of feature management functionality"
            ]
          }
        ]
      }
      """
    When I run `fspec generate-tags`
    Then "spec/TAGS.md" should contain:
      """
      ### Example 1: Phase 1 Feature File Creation

      ```gherkin
      @phase1 @cli @generator @feature-management
      Feature: Create Feature File with Template
      ```

      **Interpretation**:
      - Phase 1 feature
      - Belongs to CLI component
      - Part of feature management functionality
      """

  Scenario: Tag statistics tables are generated
    Given I have "spec/tags.json" with statistics:
      """json
      {
        "statistics": {
          "lastUpdated": "2025-01-15T10:30:00Z",
          "phaseStats": [
            {
              "phase": "Phase 1",
              "total": 5,
              "complete": 5,
              "inProgress": 0,
              "planned": 0
            }
          ],
          "componentStats": [
            {
              "component": "@cli",
              "count": 28,
              "percentage": "100%"
            }
          ],
          "updateCommand": "fspec tag-stats"
        }
      }
      """
    When I run `fspec generate-tags`
    Then "spec/TAGS.md" should contain phase statistics table
    And it should contain component statistics table
    And it should show last updated date
    And it should show update command

  Scenario: Anti-patterns section with examples
    Given I have "spec/tags.json" with anti-patterns:
      """json
      {
        "addingNewTags": {
          "antiPatterns": {
            "dont": [
              {
                "description": "Create overlapping tags",
                "example": "`@validate` and `@validation` → use `@validation`"
              }
            ],
            "do": [
              {
                "description": "Reuse existing tags through combinations"
              }
            ]
          }
        }
      }
      """
    When I run `fspec generate-tags`
    Then "spec/TAGS.md" should contain:
      """
      ❌ **DON'T**:
      - Create overlapping tags (`@validate` and `@validation` → use `@validation`)

      ✅ **DO**:
      - Reuse existing tags through combinations
      """

  Scenario: Fail if tags.json is invalid
    Given I have an invalid file "spec/tags.json" with schema errors
    When I run `fspec generate-tags`
    Then the command should exit with code 1
    And the output should display validation errors
    And the output should display "✗ Cannot generate TAGS.md: tags.json has validation errors"
    And the file "spec/TAGS.md" should not be modified

  Scenario: Regeneration is idempotent
    Given I have a valid file "spec/tags.json"
    When I run `fspec generate-tags`
    And I save the content of "spec/TAGS.md"
    And I run `fspec generate-tags` again
    Then the content of "spec/TAGS.md" should be identical to the saved version

  Scenario: Support custom output path
    Given I have a valid file "spec/tags.json"
    When I run `fspec generate-tags --output=docs/TAGS.md`
    Then the file "docs/TAGS.md" should be created
    And "spec/TAGS.md" should not be modified
