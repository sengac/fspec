{
  "scenarios": [
    {
      "name": "Add blocks relationship between work units",
      "testMappings": []
    },
    {
      "name": "Add blockedBy relationship (inverse of blocks)",
      "testMappings": []
    },
    {
      "name": "Add dependsOn relationship for soft dependency",
      "testMappings": []
    },
    {
      "name": "Add relatesTo relationship for informational linking",
      "testMappings": []
    },
    {
      "name": "Add multiple relationships of same type",
      "testMappings": []
    },
    {
      "name": "Add multiple relationship types to same work unit",
      "testMappings": []
    },
    {
      "name": "Remove blocks relationship",
      "testMappings": []
    },
    {
      "name": "Remove dependsOn relationship",
      "testMappings": []
    },
    {
      "name": "Detect direct circular dependency",
      "testMappings": []
    },
    {
      "name": "Detect transitive circular dependency",
      "testMappings": []
    },
    {
      "name": "Detect complex circular dependency chain",
      "testMappings": []
    },
    {
      "name": "Attempt to add dependency to non-existent work unit",
      "testMappings": []
    },
    {
      "name": "Attempt to add self as dependency",
      "testMappings": []
    },
    {
      "name": "Attempt to add duplicate dependency",
      "testMappings": []
    },
    {
      "name": "Auto-transition to blocked state when blockedBy exists",
      "testMappings": []
    },
    {
      "name": "Auto-unblock when blocker completes",
      "testMappings": []
    },
    {
      "name": "Manual unblock after blocker completes",
      "testMappings": []
    },
    {
      "name": "Show work unit with all dependencies",
      "testMappings": []
    },
    {
      "name": "Display dependency graph for work unit",
      "testMappings": []
    },
    {
      "name": "Show all work units blocked by specific work unit",
      "testMappings": []
    },
    {
      "name": "Find all currently blocked work units",
      "testMappings": []
    },
    {
      "name": "Show impact analysis when completing work unit",
      "testMappings": []
    },
    {
      "name": "Show dependency chain depth",
      "testMappings": []
    },
    {
      "name": "Calculate critical path through dependencies",
      "testMappings": []
    },
    {
      "name": "Prevent starting work that is blocked",
      "testMappings": []
    },
    {
      "name": "Prevent deleting work unit that blocks others",
      "testMappings": []
    },
    {
      "name": "Cascade delete dependencies when removing work unit",
      "testMappings": []
    },
    {
      "name": "Add multiple dependencies in one command",
      "testMappings": []
    },
    {
      "name": "Remove all dependencies from work unit",
      "testMappings": []
    },
    {
      "name": "Validate dependency data structure",
      "testMappings": []
    },
    {
      "name": "Repair broken bidirectional dependencies",
      "testMappings": []
    },
    {
      "name": "Show dependency statistics",
      "testMappings": []
    },
    {
      "name": "Generate Mermaid diagram of dependencies",
      "testMappings": []
    },
    {
      "name": "Warn when starting work with incomplete dependencies",
      "testMappings": []
    },
    {
      "name": "Add blocks relationship creates bidirectional link",
      "testMappings": []
    },
    {
      "name": "Remove dependency cleans up both sides of relationship",
      "testMappings": []
    },
    {
      "name": "Circular dependency detection prevents A→B→A loops",
      "testMappings": []
    },
    {
      "name": "Adding blockedBy dependency auto-sets work unit to blocked state",
      "testMappings": []
    },
    {
      "name": "Query dependency stats shows metrics across all work units",
      "testMappings": []
    }
  ],
  "stats": {
    "totalScenarios": 39,
    "coveredScenarios": 0,
    "coveragePercent": 0,
    "testFiles": [],
    "implFiles": [],
    "totalLinesCovered": 0
  }
}