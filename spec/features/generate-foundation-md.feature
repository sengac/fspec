@phase7 @cli @generator @foundation-management @documentation @critical @integration-test
Feature: Generate FOUNDATION.md from foundation.json

  """
  Architecture notes:
  - Reads foundation.json and validates against schema
  - Generates FOUNDATION.md using template-based markdown generation
  - Preserves exact structure and formatting from original
  - Adds auto-generation warning header
  - Supports custom templates for each section type
  - Uses markdown formatting helpers for tables, lists, code blocks, diagrams

  Critical implementation requirements:
  - MUST validate JSON before generation
  - MUST generate identical markdown structure to original
  - MUST include auto-generation warning at top
  - MUST preserve Mermaid diagram formatting
  - MUST handle all section types (text, lists, tables, code blocks, diagrams)
  - MUST be idempotent (generate → regenerate produces same output)

  Template sections:
  1. Header with warning
  2. Project metadata
  3. What We Are Building (with subsections)
  4. Why We Are Building It (with subsections)
  5. Architecture Diagrams (Mermaid)
  6. Core Commands Reference (tables)
  7. Feature Inventory (tables and stats)
  8. Notes Section (status, integration, future)

  References:
  - Markdown spec: https://commonmark.org/
  - Mermaid: https://mermaid.js.org/
  """

  Background: User Story
    As a developer maintaining project documentation
    I want to generate FOUNDATION.md from foundation.json
    So that documentation stays consistent and properly formatted

  Scenario: Generate FOUNDATION.md from valid foundation.json
    Given I have a valid file "spec/foundation.json"
    When I run `fspec generate-foundation`
    Then the command should exit with code 0
    And the file "spec/FOUNDATION.md" should be created
    And it should contain the auto-generation warning header
    And it should contain all sections from foundation.json
    And the output should display "✓ Generated spec/FOUNDATION.md from spec/foundation.json"

  Scenario: Auto-generation warning header is included
    Given I have a valid file "spec/foundation.json"
    When I run `fspec generate-foundation`
    Then the file "spec/FOUNDATION.md" should start with:
      """
      <!-- THIS FILE IS AUTO-GENERATED FROM spec/foundation.json -->
      <!-- DO NOT EDIT THIS FILE DIRECTLY -->
      <!-- Edit spec/foundation.json and run: fspec generate-foundation -->
      """

  Scenario: Project metadata section is generated correctly
    Given I have "spec/foundation.json" with project metadata:
      """json
      {
        "project": {
          "name": "fspec",
          "description": "A CLI tool for AI agents",
          "repository": "https://github.com/rquast/fspec",
          "license": "MIT",
          "importantNote": "This is a legitimate developer tool..."
        }
      }
      """
    When I run `fspec generate-foundation`
    Then "spec/FOUNDATION.md" should contain:
      """
      # fspec Project Foundation Document

      **IMPORTANT NOTE:** This is a legitimate developer tool...
      """

  Scenario: Architecture diagrams are preserved with Mermaid formatting
    Given I have "spec/foundation.json" with an architecture diagram:
      """json
      {
        "architectureDiagrams": [
          {
            "title": "fspec System Context",
            "mermaidCode": "graph TB\n  AI[AI Agent]\n  FSPEC[fspec CLI]"
          }
        ]
      }
      """
    When I run `fspec generate-foundation`
    Then "spec/FOUNDATION.md" should contain:
      """
      ### fspec System Context

      ```mermaid
      graph TB
        AI[AI Agent]
        FSPEC[fspec CLI]
      ```
      """

  Scenario: Command tables are generated with proper markdown syntax
    Given I have "spec/foundation.json" with commands:
      """json
      {
        "coreCommands": {
          "categories": [
            {
              "title": "Feature File Commands",
              "commands": [
                {
                  "command": "fspec create-feature <name>",
                  "description": "Create new feature file",
                  "status": "✅"
                }
              ]
            }
          ]
        }
      }
      """
    When I run `fspec generate-foundation`
    Then "spec/FOUNDATION.md" should contain a markdown table:
      """
      - `fspec create-feature <name>` - Create new feature file ✅
      """

  Scenario: Fail if foundation.json is invalid
    Given I have an invalid file "spec/foundation.json" with schema errors
    When I run `fspec generate-foundation`
    Then the command should exit with code 1
    And the output should display validation errors
    And the output should display "✗ Cannot generate FOUNDATION.md: foundation.json has validation errors"
    And the file "spec/FOUNDATION.md" should not be modified

  Scenario: Regeneration is idempotent
    Given I have a valid file "spec/foundation.json"
    When I run `fspec generate-foundation`
    And I save the content of "spec/FOUNDATION.md"
    And I run `fspec generate-foundation` again
    Then the content of "spec/FOUNDATION.md" should be identical to the saved version

  Scenario: Support custom output path
    Given I have a valid file "spec/foundation.json"
    When I run `fspec generate-foundation --output=docs/FOUNDATION.md`
    Then the file "docs/FOUNDATION.md" should be created
    And "spec/FOUNDATION.md" should not be modified
